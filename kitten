#!python3
import argparse
from paws.util_paw import UtilPaw
from paws.scan_paw import ScanPaw

Parser = argparse.ArgumentParser(description='Process some integers.')
Parser.add_argument(
                    '-t', '--target',
                    type=str,
                    help='Define the target that is to be scanned.',
)
Parser.add_argument(
                    '-mt', '--maxthreads',
                    type=int,
                    help='Max number of threads that will be opened at the same time.',
)
Parser.add_argument('-v', '--verbose',
                    action='store_true',
                    help='Run verbosely.',
)

class Kitten:

    util_paw = None
    scan_paw = None

    options = {
        'target': 'localhost',
        'verbose': False,
        'maxthreads': 100,
    }

    def __init__(self) -> None:
        self.options = self.get_parsed_args()
        self.util_paw = UtilPaw(self.options)
        self.scan_paw = ScanPaw(self.options, self.util_paw)

        open_ports = self.scan_paw.get_open_ports()
        print(self.scan_paw.get_services(open_ports))


    def get_parsed_args(self) -> dict:

        new_options = self.options
        args = Parser.parse_args().__dict__

        for key in args.keys():
            if args[key] != None:
                new_options[key] = args[key]

        return new_options


if __name__ == '__main__':
    try:
        Kitten()
    except KeyboardInterrupt:
        print('\033[1m meow.\033[0m')
#!/usr/bin/env python3
from paws.arg_paw import ArgPaw
from paws.util_paw import UtilPaw
from paws.scan_paw import ScanPaw

# execute mode with given options (threading/multipr., how many th, target, add. ports...)


class Kitten:

    arg_paw = None
    util_paw = None
    scan_paw = None

    options = {}

    def __init__(self) -> None:
        self.arg_paw = ArgPaw()

        self.options = self.arg_paw.get_options()
        
        self.util_paw = UtilPaw(self.options)
        self.scan_paw = ScanPaw(self.options, self.util_paw)

        self.util_paw.print_prolog()
        self.handle_command()
        
    def handle_command(self):
        command = self.options['cmd']

        if command == 'scan':
            self.util_paw.print_scan_info()
            open_ports = self.scan_paw.get_open_ports_multiprocessing()
            services = self.scan_paw.get_services(open_ports)
            self.util_paw.print_scan_results(services)

def main():
    try:
        Kitten()
    except KeyboardInterrupt:
        print('\033[1m\nmeow.\033[0m')

if __name__ == '__main__':
    main()